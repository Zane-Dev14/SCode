import sqlite3
import re
import json

# Path to vulnerabilities DB
DB_PATH = "/app/backend/vulnerabilities.db"

def load_vulnerability_patterns():
    """
    Load vulnerability patterns from the SQLite database.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT language, pattern_type, pattern, name, description, severity FROM vulnerability_patterns")
    
    patterns = []
    for row in cursor.fetchall():
        patterns.append({
            "language": row[0],
            "type": row[1],
            "pattern": row[2],
            "name": row[3],
            "description": row[4],
            "severity": row[5],
        })

    conn.close()
    return patterns

def scan_vulnerabilities(ast_map):
    """
    Scans ASTs against vulnerability patterns.
    Returns a list of detected vulnerabilities.
    """
    patterns = load_vulnerability_patterns()
    vulnerabilities = []

    for file_path, ast in ast_map.items():
        file_lang = file_path.split('.')[-1]

        for pattern in patterns:
            if pattern['language'] == file_lang:
                # Match pattern in AST S-expression
                if re.search(pattern['pattern'], ast.root_node.sexp()):
                    vulnerabilities.append({
                        "file": file_path,
                        "vulnerability": pattern['name'],
                        "description": pattern['description'],
                        "severity": pattern['severity']
                    })

    return vulnerabilities

if __name__ == "__main__":
    # Example usage
    with open("/app/backend/ast_output.json", "r", encoding="utf-8") as f:
        ast_map = json.load(f)

    results = scan_vulnerabilities(ast_map)
    print(json.dumps(results, indent=4))
